@model IEnumerable<net_e_commerce.Models.Product>

@{
    ViewData["Title"] = "Index";
}

<!DOCTYPE html>

<!--
 // WEBSITE: https://themefisher.com
 // TWITTER: https://twitter.com/themefisher
 // FACEBOOK: https://www.facebook.com/themefisher
 // GITHUB: https://github.com/themefisher/
-->

<html lang="en">
<head>

    <!-- Basic Page Needs
    ================================================== -->
    <meta charset="utf-8">
    <title>Aviato | E-commerce template</title>

    <!-- Mobile Specific Metas
    ================================================== -->
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="description" content="Construction Html5 Template">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=5.0">
    <meta name="author" content="Themefisher">
    <meta name="generator" content="Themefisher Constra HTML Template v1.0">

    <!-- Favicon -->
    <link rel="shortcut icon" type="image/x-icon" href="~/images/favicon.png" />

    <!-- Themefisher Icon font -->
    <link rel="stylesheet" href="~/plugins/themefisher-font/style.css">
    <!-- bootstrap.min css -->
    <link rel="stylesheet" href="~/plugins/bootstrap/css/bootstrap.min.css">

    <!-- Animate css -->
    <link rel="stylesheet" href="~/plugins/animate/animate.css">
    <!-- Slick Carousel -->
    <link rel="stylesheet" href="~/plugins/slick/slick.css">
    <link rel="stylesheet" href="~/plugins/slick/slick-theme.css">

    <!-- Main Stylesheet -->
    <link rel="stylesheet" href="~/css/style.css">

</head>

<body id="body">

    <div class="hero-slider">
        <div class="slider-item th-fullpage hero-area" style="background-image: url(images/slider/slider-1.jpg);">
            <div class="container">
                <div class="row">
                    <div class="col-lg-8 text-center">
                        <p data-duration-in=".3" data-animation-in="fadeInUp" data-delay-in=".1">PRODUCTS</p>
                        <h1 data-duration-in=".3" data-animation-in="fadeInUp" data-delay-in=".5">The beauty of nature <br> is hidden in details.</h1>
                        <a data-duration-in=".3" data-animation-in="fadeInUp" data-delay-in=".8" class="btn" asp-controller="Product" asp-action="AllProducts">Shop Now</a>
                    </div>
                </div>
            </div>
        </div>
        <div class="slider-item th-fullpage hero-area" style="background-image: url(images/slider/slider-3.jpg);">
            <div class="container">
                <div class="row">
                    <div class="col-lg-8 text-left">
                        <p data-duration-in=".3" data-animation-in="fadeInUp" data-delay-in=".1">PRODUCTS</p>
                        <h1 data-duration-in=".3" data-animation-in="fadeInUp" data-delay-in=".5">The beauty of nature <br> is hidden in details.</h1>
                        <a data-duration-in=".3" data-animation-in="fadeInUp" data-delay-in=".8" class="btn" asp-controller="Product" asp-action="AllProducts">Shop Now</a>
                    </div>
                </div>
            </div>
        </div>
        <div class="slider-item th-fullpage hero-area" style="background-image: url(images/slider/slider-2.jpg);">
            <div class="container">
                <div class="row">
                    <div class="col-lg-8 text-right">
                        <p data-duration-in=".3" data-animation-in="fadeInUp" data-delay-in=".1">PRODUCTS</p>
                        <h1 data-duration-in=".3" data-animation-in="fadeInUp" data-delay-in=".5">The beauty of nature <br> is hidden in details.</h1>
                        <a data-duration-in=".3" data-animation-in="fadeInUp" data-delay-in=".8" class="btn" asp-controller="Product" asp-action="AllProducts">Shop Now</a>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <section class="product-category section">
        <div class="container">
            <div class="row">
                <div class="col-md-12">
                    <div class="title text-center">
                        <h2>Product Category</h2>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="category-box">
                        <a asp-controller="Category" asp-action="Clothes">
                            <img src="images/shop/category/category-1.jpg" alt="" />
                            <div class="content">
                                <h3>Clothes Sales</h3>
                                <p>Shop New Season Clothing</p>
                            </div>
                        </a>
                    </div>
                    <div class="category-box">
                        <a asp-controller="Category" asp-action="Smart">
                            <img src="images/shop/category/category-2.jpg" alt="" />
                            <div class="content">
                                <h3>Accessory</h3>
                                <p>Get Wide Range Selection</p>
                            </div>
                        </a>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="category-box category-box-2">
                        <a asp-controller="Category" asp-action="Jewellery">
                            <img src="images/shop/category/category-3.jpg" alt="" />
                            <div class="content">
                                <h3>Jewellery</h3>
                                <p>Special Design Comes First</p>
                            </div>
                        </a>
                    </div>
                </div>
            </div>
        </div>
    </section>

    <section class="products section bg-gray">
        <div class="container">
            <div class="row">
                <div class="title text-center">
                    <h2>All Products</h2>
                </div>
            </div>
            <div class="row">

                @foreach (var item in Model)
                {
                    <div class="col-md-4" style="min-height:500px; max-height:300px">
                        <div class="product-item card">
                            <div class="product-thumb">
                                @if (item.Quantity == 0)
                                {
                                    <span class="bage">Sold Out</span>
                                }
                                else if (item.Quantity < 10)
                                {
                                    <span class="bage">Last @Url.Content(item.Quantity.ToString()) product</span>
                                }
                                <img class="img-responsive" style="width:400px;height:auto" src="@Url.Content(item.Photo)" alt="product-img" />
                                <div class="preview-meta">
                                </div>
                            </div>
                            <div class="product-content">
                                <h4><a asp-controller="Product" asp-action="SingleProduct">@Url.Content(item.Name)</a></h4>
                                <p class="price">$@Url.Content(item.Price.ToString())</p>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    </section>


    <!--
    Start Call To Action
    ==================================== -->
    <section class="call-to-action bg-gray section">
        <div class="container">
            <div class="row">
                <div class="col-md-12 text-center">
                    <div class="title">
                        <h2>SUBSCRIBE TO NEWSLETTER</h2>
                        <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Fugiat, <br> facilis numquam impedit ut sequi. Minus facilis vitae excepturi sit laboriosam.</p>
                    </div>
                    <div class="col-lg-6 col-md-offset-3">
                        <div class="input-group subscription-form">
                            <input type="text" class="form-control" placeholder="Enter Your Email Address">
                            <span class="input-group-btn">
                                <button class="btn btn-main" type="button">Subscribe Now!</button>
                            </span>
                        </div><!-- /input-group -->
                    </div><!-- /.col-lg-6 -->

                </div>
            </div> 		<!-- End row -->
        </div>   	<!-- End container -->
    </section>   <!-- End section -->

    <section class="section instagram-feed">
        <div class="container">
            <div class="row">
                <div class="title">
                    <h2>View us on instagram</h2>
                </div>
            </div>
            <div class="row">
                <div class="col-12">
                    <div class="instagram-slider" id="instafeed" data-accessToken="IGQVJYeUk4YWNIY1h4OWZANeS1wRHZARdjJ5QmdueXN2RFR6NF9iYUtfcGp1NmpxZA3RTbnU1MXpDNVBHTzZAMOFlxcGlkVHBKdjhqSnUybERhNWdQSE5hVmtXT013MEhOQVJJRGJBRURn"></div>
                </div>
            </div>
        </div>
    </section>

    <!--
    Essential Scripts
    =====================================-->
    <!-- Main jQuery -->
    <script src="~/plugins/jquery/dist/jquery.min.js"></script>
    <!-- Bootstrap 3.1 -->
    <script src="~/plugins/bootstrap/js/bootstrap.min.js"></script>
    <!-- Bootstrap Touchpin -->
    <script src="~/plugins/bootstrap-touchspin/dist/jquery.bootstrap-touchspin.min.js"></script>
    <!-- Instagram Feed Js -->
    <script src="~/plugins/instafeed/instafeed.min.js"></script>
    <!-- Video Lightbox Plugin -->
    <script src="~/plugins/ekko-lightbox/dist/ekko-lightbox.min.js"></script>
    <!-- Count Down Js -->
    <script src="~/plugins/syo-timer/build/jquery.syotimer.min.js"></script>

    <!-- slick Carousel -->
    <script src="~/plugins/slick/slick.min.js"></script>
    <script src="~/plugins/slick/slick-animation.min.js"></script>

    <!-- Google Mapl -->
    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCC72vZw-6tGqFyRhhg5CkF2fqfILn2Tsw"></script>
    <script type="text/javascript" src="~/plugins/google-map/gmap.js"></script>

    <!-- Main Js File -->
    <script src="~/js/script.js"></script>

    <script>/*!
         * money.js / fx() v0.2
         * Copyright 2014 Open Exchange Rates
         *
         * JavaScript library for realtime currency conversion and exchange rate calculation.
         *
         * Freely distributable under the MIT license.
         * Portions of money.js are inspired by or borrowed from underscore.js
         *
         * For details, examples and documentation:
         * http://openexchangerates.github.io/money.js/
         */
        (function (root, undefined) {

            // Create a safe reference to the money.js object for use below.
            var fx = function (obj) {
                return new fxWrapper(obj);
            };

            // Current version.
            fx.version = '0.2';


            /* --- Setup --- */

            // fxSetup can be defined before loading money.js, to set the exchange rates and the base
            // (and default from/to) currencies - or the rates can be loaded in later if needed.
            var fxSetup = root.fxSetup || {
                rates: {},
                base: ""
            };

            // Object containing exchange rates relative to the fx.base currency, eg { "GBP" : "0.64" }
            fx.rates = fxSetup.rates;

            // Default exchange rate base currency (eg "USD"), which all the exchange rates are relative to
            fx.base = fxSetup.base;

            // Default from / to currencies for conversion via fx.convert():
            fx.settings = {
                from: fxSetup.from || fx.base,
                to: fxSetup.to || fx.base
            };


            /* --- Conversion --- */

            // The base function of the library: converts a value from one currency to another
            var convert = fx.convert = function (val, opts) {
                // Convert arrays recursively
                if (typeof val === 'object' && val.length) {
                    for (var i = 0; i < val.length; i++) {
                        val[i] = convert(val[i], opts);
                    }
                    return val;
                }

                // Make sure we gots some opts
                opts = opts || {};

                // We need to know the `from` and `to` currencies
                if (!opts.from) opts.from = fx.settings.from;
                if (!opts.to) opts.to = fx.settings.to;

                // Multiple the value by the exchange rate
                return val * getRate(opts.to, opts.from);
            };

            // Returns the exchange rate to `target` currency from `base` currency
            var getRate = function (to, from) {
                // Save bytes in minified version
                var rates = fx.rates;

                // Make sure the base rate is in the rates object:
                rates[fx.base] = 1;

                // Throw an error if either rate isn't in the rates array
                if (!rates[to] || !rates[from]) throw "fx error";

                // If `from` currency === fx.base, return the basic exchange rate for the `to` currency
                if (from === fx.base) {
                    return rates[to];
                }

                // If `to` currency === fx.base, return the basic inverse rate of the `from` currency
                if (to === fx.base) {
                    return 1 / rates[from];
                }

                // Otherwise, return the `to` rate multipled by the inverse of the `from` rate to get the
                // relative exchange rate between the two currencies
                return rates[to] * (1 / rates[from]);
            };


            /* --- OOP wrapper and chaining --- */

            // If fx(val) is called as a function, it returns a wrapped object that can be used OO-style
            var fxWrapper = function (val) {
                // Experimental: parse strings to pull out currency code and value:
                if (typeof val === "string") {
                    this._v = parseFloat(val.replace(/[^0-9-.]/g, ""));
                    this._fx = val.replace(/([^A-Za-z])/g, "");
                } else {
                    this._v = val;
                }
            };

            // Expose `wrapper.prototype` as `fx.prototype`
            var fxProto = fx.prototype = fxWrapper.prototype;

            // fx(val).convert(opts) does the same thing as fx.convert(val, opts)
            fxProto.convert = function () {
                var args = Array.prototype.slice.call(arguments);
                args.unshift(this._v);
                return convert.apply(fx, args);
            };

            // fx(val).from(currency) returns a wrapped `fx` where the value has been converted from
            // `currency` to the `fx.base` currency. Should be followed by `.to(otherCurrency)`
            fxProto.from = function (currency) {
                var wrapped = fx(convert(this._v, { from: currency, to: fx.base }));
                wrapped._fx = fx.base;
                return wrapped;
            };

            // fx(val).to(currency) returns the value, converted from `fx.base` to `currency`
            fxProto.to = function (currency) {
                return convert(this._v, { from: this._fx ? this._fx : fx.settings.from, to: currency });
            };


            /* --- Module Definition --- */

            // Export the fx object for CommonJS. If being loaded as an AMD module, define it as such.
            // Otherwise, just add `fx` to the global object
            if (typeof exports !== 'undefined') {
                if (typeof module !== 'undefined' && module.exports) {
                    exports = module.exports = fx;
                }
                exports.fx = fx;
            } else if (typeof define === 'function' && define.amd) {
                // Return the library as an AMD module:
                define([], function () {
                    return fx;
                });
            } else {
                // Use fx.noConflict to restore `fx` back to its original value before money.js loaded.
                // Returns a reference to the library's `fx` object; e.g. `var money = fx.noConflict();`
                fx.noConflict = (function (previousFx) {
                    return function () {
                        // Reset the value of the root's `fx` variable:
                        root.fx = previousFx;
                        // Delete the noConflict function:
                        fx.noConflict = undefined;
                        // Return reference to the library to re-assign it:
                        return fx;
                    };
                })(root.fx);

                // Declare `fx` on the root (global/window) object:
                root['fx'] = fx;
            }

            // Root will be `window` in browser or `global` on the server:
        }(this));</script>
</body>
</html>
